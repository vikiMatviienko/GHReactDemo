{"version":3,"sources":["components/Navigation/Menu/Menu.module.css","components/Navigation/NavigationItems/NavigationItems.module.css","components/UI/Modal/Modal.module.css","components/Layout/Layout.module.css","components/EditIcons/EditIcons.module.css","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/Menu/Menu.js","components/Layout/Layout.js","components/EditIcons/EditIcons.js","components/Codes/Code/Code.js","components/Codes/Codes.js","components/Editor/Editor.js","components/UI/Modal/Modal.js","containers/CodesEditor/CodesEditor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationItems","props","items","map","el","index","key","href","className","active","classes","linkText","Menu","Toolbar","SubNavScroll","Layout","Content","this","children","Component","EditIcons","BillingCodesPanel","onClick","editItem","data-qauto","tabIndex","role","data-toggle","data-trigger","data-content","removeItem","Code","htmlFor","disabled","id","code","description","edit","removed","Codes","codes","item","Fragment","editCodeHandler","removeCodeHandler","Editor","type","value","onChange","codeChanged","descriptionChanged","save","memo","ModalContent","Modal","Overlay","visability","CodesEditor","useState","editingIndex","editPressed","state","setCodesState","updatedState","event","target","codeChangeHandler","descriptionChangeHandler","splice","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3d0f66c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Menu_Toolbar__2YFNm\",\"sub-nav-expanded\":\"Menu_sub-nav-expanded__TTJKA\",\"sub-nav\":\"Menu_sub-nav__3Ns1U\",\"sub-nav-heading\":\"Menu_sub-nav-heading__3LvBG\",\"i-arrow-vert\":\"Menu_i-arrow-vert__25zIb\",\"SubNavScroll\":\"Menu_SubNavScroll__1eccO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItems\":\"NavigationItems_NavigationItems__Uu3u6\",\"sub-nav\":\"NavigationItems_sub-nav__9mZA1\",\"active\":\"NavigationItems_active__1JRFl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__11adI\",\"Overlay\":\"Modal_Overlay__3IE0f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__aiX1l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BillingCodesPanel\":\"EditIcons_BillingCodesPanel__3Ry13\"};","import React from 'react';\r\nimport classes from './NavigationItems.module.css';\r\n\r\nconst NavigationItems = (props) => {\r\n    const items = props.items.map((el, index) => (\r\n        <li key={index}><a href={el.href} className={el.active ? classes.active : null}>{el.linkText}</a></li>\r\n    ));\r\n\r\n    return (\r\n        <ul className={classes.NavigationItems + ' sub-nav'}>\r\n            {items}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default NavigationItems;","import React from 'react';\r\n\r\nimport classes from './Menu.module.css';\r\nimport NavigationItems from '../../Navigation/NavigationItems/NavigationItems';\r\n\r\nconst Menu = (props) => (\r\n    <div className={classes.Toolbar + ' sub-nav-wrap text-center text-md-left'}>\r\n        <h1 className=\"h3 mb-md-32 py-16 px-8 p-md-0\">\r\n            Settings\r\n        <span className=\"d-inline-flex align-items-center d-md-none\">&nbsp;<span className=\"i-arrow-vert ml-12\"></span></span>\r\n        </h1>\r\n        <div className=\"relative\">\r\n            <div className={classes.SubNavScroll + ' sub-nav-scrollable no-scroll'}>\r\n\r\n                <NavigationItems\r\n                    items={[\r\n                        { linkText: 'Billing Codes', href: '/', active: true },\r\n                        { linkText: 'Payment', href: '/payment' }\r\n                    ]} />\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Menu;","import React, { Component} from 'react';\r\n\r\nimport Menu from '../Navigation/Menu/Menu';\r\nimport classes from './Layout.module.css';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Menu />\r\n                <main className={classes.Content}>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Layout;","import React from 'react';\r\nimport classes from './EditIcons.module.css'\r\n\r\nconst EditIcons = (props) => (\r\n    <div>\r\n        <div className={classes.BillingCodesPanel + ' col-md-2'}>\r\n            <span className=\"link\" onClick = {props.editItem} data-qauto=\"edit_billing_ico\" tabIndex=\"0\" role=\"button\" data-toggle=\"popover\" data-trigger=\"hover focus\" data-content=\"Edit Billing code\">\r\n                <span className=\"i-edit i-m\"></span>\r\n            </span>\r\n\r\n            <span className=\"link _hint\" onClick = {props.removeItem} data-qauto=\"remove_code_ico\" tabIndex=\"0\" role=\"button\" data-toggle=\"popover\" data-trigger=\"hover focus\" data-content=\"Remove Billing Code\">\r\n                <span className=\"i-trash i-m\"></span>\r\n            </span>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default EditIcons;","import React from 'react';\r\nimport EditIcons from '../../EditIcons/EditIcons';\r\n//import classes from './Code.module.css'\r\n\r\n\r\nconst Code = (props) => (\r\n    <div className=\"row row-gutter-s billing-codes-row\">\r\n        <div className=\"col-md-5\">\r\n            <div className=\"form-field _field mb-0\" data-qauto=\"first_name\">\r\n                <label htmlFor=\"billingCode_Key\">Code</label>\r\n                <div className=\"form-el\" disabled=\"disabled\" id=\"billingCode_Key\">{props.code}</div>\r\n            </div>\r\n        </div>\r\n        <div className=\"col-md-5\">\r\n            <div className=\"form-field _field mb-0\" data-qauto=\"first_name\">\r\n                <label htmlFor=\"billingCode_Value\">Description</label>\r\n                <div className=\"form-el\" disabled=\"disabled\" id=\"billingCode_Value\">{props.description}</div>\r\n            </div>\r\n        </div>\r\n        <EditIcons editItem={props.edit} removeItem={props.removed}/>\r\n    </div>\r\n);\r\n\r\nexport default Code;","import React from 'react';\r\nimport Code from './Code/Code';\r\n\r\n\r\n\r\nconst Codes = (props) => {\r\n\r\n    return props.codes.map((item, index) => {\r\n        return (\r\n            <React.Fragment>\r\n            <div className=\"box-content input-disabled\">\r\n                <div className=\"box-wrap\">\r\n                    <div className=\"bill-codes-grid\"><Code\r\n                        code={item.code}\r\n                        description={item.description}\r\n                        key={index}\r\n                        edit={() => props.editCodeHandler(index)}\r\n                        removed={() => props.removeCodeHandler(index)}/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n\r\n    });\r\n}\r\n\r\nexport default Codes;","import React from 'react';\r\n\r\nconst Editor = (props) => (\r\n\t<div className=\"row row-gutter-s\">\r\n\t\t<div className=\"col-md-6\">\r\n\t\t\t<div className=\"form-field _field\" data-qauto=\"edit_bill_code_field\">\r\n\t\t\t\t<label htmlFor=\"Code\">Code</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName='form-el'\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tvalue={props.code}\r\n\t\t\t\t\tonChange={props.codeChanged}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div className=\"col-md-6\">\r\n\t\t\t<div className=\"form-field _field\" data-qauto=\"edit_bill_descript_field\">\r\n\t\t\t\t<label htmlFor=\"Description\">Description</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName='form-el'\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tvalue={props.description}\r\n\t\t\t\t\tonChange={props.descriptionChanged}/>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<button className='btn' onClick={props.save}>Save</button>\r\n\t</div>\r\n);\r\n\r\nexport default Editor;","import React, {memo} from 'react';\r\nimport classes from './Modal.module.css';\r\n\r\n\r\nconst Modal = (props) => {\r\n\r\n\tconst ModalContent = (\r\n\t\t<div>\r\n\t\t\t<div className=\"box-content\">\r\n\t\t\t\t<div className=\"box-wrap\">\r\n\t\t\t\t\t<div className={classes.Modal}>{props.children}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.Overlay}></div>\r\n\t\t</div>\r\n\t);\r\n\r\n\r\n\treturn props.visability ? ModalContent : null;\r\n};\r\n\r\nexport default memo(Modal);","import React, { useState } from 'react';\r\nimport Codes from '../../components/Codes/Codes';\r\nimport Editor from '../../components/Editor/Editor';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\n\r\nconst CodesEditor = (props) => {\r\n    const [state, setCodesState] = useState({\r\n        codes: [\r\n            {code:'code1',description:'description1'},\r\n            {code:'code2',description:'description2'},\r\n            {code:'code3',description:'description3'},\r\n            {code:'code4',description:'description4'},\r\n            {code:'code5',description:'description5'}\r\n        ],\r\n        editingIndex: 1,\r\n        editPressed: false\r\n    });\r\n\r\n    const editPressedHandler = (index) => {\r\n        const updatedState = {...state};\r\n\r\n        updatedState.editPressed = true;\r\n        updatedState.editingIndex = index;\r\n        setCodesState(updatedState);\r\n    };\r\n\r\n    const removeCodeHandler = (index) => {\r\n        const updatedState = {...state};\r\n\r\n        updatedState.codes.splice(index, 1);\r\n        setCodesState(updatedState);\r\n    };\r\n\r\n    const onSaveHandler = (index) => {\r\n        const updatedState = {...state};\r\n\r\n        updatedState.editPressed = false;\r\n        setCodesState(updatedState);\r\n    };\r\n\r\n    const codeChangeHandler = (event) => {\r\n        const updatedState = {...state};\r\n\r\n        updatedState.codes[state.editingIndex].code = event.target.value;\r\n        setCodesState(updatedState);\r\n    };\r\n\r\n    const descriptionChangeHandler = (event) => {\r\n        const updatedState = {...state};\r\n\r\n        updatedState.codes[state.editingIndex].description = event.target.value;\r\n        setCodesState(updatedState);\r\n    };\r\n\r\n    //let codes = state.codes\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Modal visability={state.editPressed}>\r\n                <Editor \r\n                    save={onSaveHandler} \r\n                    code={state.codes[state.editingIndex].code} \r\n                    description={state.codes[state.editingIndex].description}\r\n                    codeChanged={(event) => codeChangeHandler(event)}\r\n                    descriptionChanged={(event) => descriptionChangeHandler(event)} />\r\n            </Modal>\r\n            <Codes codes={state.codes} editCodeHandler={editPressedHandler} removeCodeHandler={removeCodeHandler} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default CodesEditor;","import React from 'react';\r\nimport Layout from './components/Layout/Layout';\r\nimport CodesEditor from './containers/CodesEditor/CodesEditor';\r\n\r\nfunction App() {\r\n    return (\r\n        <Layout>\r\n            <CodesEditor />\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}